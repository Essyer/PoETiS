import re

# more complex expressions before simple, for example:
# mods with cold dmg to spells have to be before simple cold dmg and so on
supported_mods = {
    'accuracy_rating':      re.compile(r'(\d+) to accuracy rating.*'),
    'adds_cold_spell':      re.compile(r'(\d+) to (\d+) cold damage to spells.*'),
    'adds_cold':            re.compile(r'(\d+) to (\d+) cold damage.*'),
    'adds_fire_spell':      re.compile(r'(\d+) to (\d+) fire damage to spells.*'),
    'adds_fire':            re.compile(r'(\d+) to (\d+) fire damage.*'),
    'adds_chaos':           re.compile(r'(\d+) to (\d+) chaos damage.*'),
    'adds_lightning_spell': re.compile(r'(\d+) to (\d+) lightning damage to spells.*'),
    'adds_lightning':       re.compile(r'(\d+) to (\d+) lightning damage.*'),
    'adds_phys':            re.compile(r'(\d+) to (\d+) physical damage.*'),
    'attack_speed':         re.compile(r'(\d+)% increased bleeding duration.*'),
    'bleed_duration':       re.compile(r'(\d+)% increased attack speed.*'),
    'block_chance':         re.compile(r'(\d+)% chance to block.*'),
    'block_projectiles':    re.compile(r'(\d+)% additional block chance against projectiles.*'),
    'cast_speed':           re.compile(r'(\d+)% increased cast speed.*'),
    'chance_avoid_elem':    re.compile(r'(\d+)% chance to avoid elemental ailments'),
    'chance_avoid_stun':    re.compile(r'(\d+)% chance to avoid being stunned'),
    'chance_bleed':         re.compile(r'(\d+)% chance to cause bleeding on hit.*'),
    'chance_block_spell':   re.compile(r'(\d+)% chance to block spells.*'),
    'chance_dodge_attack':  re.compile(r'(\d+)% chance to dodge attacks.*'),
    'chance_dodge_spell':   re.compile(r'(\d+)% chance to dodge spell damage.*'),
    'chance_freeze':        re.compile(r'(\d+)% chance to freeze.*'),
    'chance_ignite':        re.compile(r'(\d+)% chance to ignite.*'),
    'chance_poison':        re.compile(r'(\d+)% chance to poison on hit.*'),
    'chance_shock':         re.compile(r'(\d+)% chance to shock.*'),
    'crit_chance_spells':   re.compile(r'(\d+)% increased critical strike chance for spells.*'),
    'crit_chance':          re.compile(r'(\d+)% increased critical strike chance.*'),
    'crit_chance_global':   re.compile(r'(\d+)% increased global critical strike chance.*'),
    'crit_mult':            re.compile(r'(\d+)% to global critical strike multiplier.*'),
    'flask_charges_gained': re.compile(r'(\d+)% increased flask charges gained.*'),
    'flash_charges_used':   re.compile(r'(\d+)% reduced flask charges used.*'),
    'flask_duration':       re.compile(r'(\d+)% increased flask effect duration.*'),
    'flask_life_recovery':  re.compile(r'(\d+)% increased flask life recovery.*'),
    'flask_mana_recovery':  re.compile(r'(\d+)% increased flask mana recovery.*'),
    'gem_level':            re.compile(r'(\d+) to level of socketed gems.*'),
    'gem_lvl_bow':          re.compile(r'(\d+) to level of socketed bow gems.*'),
    'gem_lvl_chaos':        re.compile(r'(\d+) to level of socketed chaos gems.*'),
    'gem_lvl_el_cold':      re.compile(r'(\d+) to level of socketed cold gems.*'),
    'gem_lvl_el_fire':      re.compile(r'(\d+) to level of socketed fire gems.*'),
    'gem_lvl_el_light':     re.compile(r'(\d+) to level of socketed lightning gems.*'),
    'gem_lvl_melee':        re.compile(r'(\d+) to level of socketed melee gems.*'),
    'gem_lvl_minion':       re.compile(r'(\d+) to level of socketed minion gems.*'),
    'gem_lvl_support':      re.compile(r'(\d+) to level of socketed support gems.*'),
    'gem_quality_support':  re.compile(r'(\d+)% to quality of socketed support gems.*'),
    'incr_acc':             re.compile(r'(\d+)% increased accuracy rating.*'),
    'incr_armour':          re.compile(r'(\d+)% increased armour.*'),
    'incr_attack':          re.compile(r'(\d+)% increased attack damage.*'),
    'incr_bleeding':        re.compile(r'(\d+)% increased damage with bleeding.*'),
    'incr_burning':         re.compile(r'(\d+)% increased burning damage.*'),
    'incr_cold_dmg':        re.compile(r'(\d+)% increased cold damage.*'),
    'incr_def_arm_ev':      re.compile(r'(\d+)% increased armour and evasion.*'),
    'incr_def_arm_es':      re.compile(r'(\d+)% increased armour and energy shield.*'),
    'incr_el_dmg_attskill': re.compile(r'(\d+)% increased elemental damage with attack skills.*'),
    'incr_el_dmg':          re.compile(r'(\d+)% increased elemental damage.*'),
    'incr_energy_shield':   re.compile(r'(\d+)% increased energy shield.*'),
    'incr_evasion':         re.compile(r'(\d+)% increased evasion.*'),
    'incr_fire_dmg':        re.compile(r'(\d+)% increased fire damage.*'),
    'incr_light_dmg':       re.compile(r'(\d+)% increased lightning damage.*'),
    'incr_max_es':          re.compile(r'(\d+)% increased maximum energy shield.*'),
    'incr_phys_dmg':        re.compile(r'(\d+)% increased physical damage.*'),
    'incr_glob_phys_dmg':   re.compile(r'(\d+)% increased global physical damage.*'),
    'incr_poison_dmg':      re.compile(r'(\d+)% increased damage with poison.*'),
    'incr_quantity':        re.compile(r'(\d+)% increased quantity.*'),
    'incr_rarity':          re.compile(r'(\d+)% increased rarity.*'),
    'incr_mine_dmg':        re.compile(r'(\d+)% increased mine damage.*'),
    'incr_mine_lay':        re.compile(r'(\d+)% increased mine laying speed.*'),
    'incr_trap_dmg':        re.compile(r'(\d+)% increased trap damage.*'),
    'incr_trap_throw':      re.compile(r'(\d+)% increased trap throwing speed.*'),
    'life_leech':           re.compile(r'(\d+)% increased life leeched per second.*'),
    'life_on_block':        re.compile(r'(\d+) life gained when you block.*'),
    'life_on_hit':          re.compile(r'(\d+) life gained for each enemy hit by your attacks.*'),
    'life_on_hit_weapon':   re.compile(r'(\d+) life gained for each enemy hit by attacks.*'),
    'life_on_kill':         re.compile(r'(\d+) life gained on kill.*'),
    'life_regen':           re.compile(r'(\d+) life regenerated per second.*'),
    'life_regen_percent':   re.compile(r'(\d+)% of life regenerated per second.*'),
    'light_radius':         re.compile(r'(\d+)% increased light radius.*'),
    'mana_on_block':        re.compile(r'(\d+) mana gained when you block.*'),
    'mana_on_kill':         re.compile(r'(\d+) mana gained on kill.*'),
    'mana_regen':           re.compile(r'(\d+)% increased mana regeneration rate.*'),
    'max_life':             re.compile(r'(\d+) to maximum life.*'),
    'max_mana':             re.compile(r'(\d+) to maximum mana.*'),
    'mov_speed':            re.compile(r'(\d+)% increased movement speed.*'),
    'phys_leech_life':      re.compile(r'(\d+\.?\d*)% of physical attack damage leeched as life.*'),
    'phys_leech_mana':      re.compile(r'(\d+\.?\d*)% of physical attack damage leeched as mana.*'),
    'phys_reflect':         re.compile(r'reflects (\d+) physical damage to melee attackers.*'),
    'phys_reduct':          re.compile(r'(\d+)% additional physical damage reduction.*'),
    'poison_duration':      re.compile(r'(\d+)% increased poison duration.*'),
    'projectile_speed':     re.compile(r'(\d+)% increased projectile speed.*'),
    'reduced_attr_req':     re.compile(r'(\d+)% reduced attribute requirements.*'),
    'spell_dmg':            re.compile(r'(\d+)% increased spell damage.*'),
    'stunblock':            re.compile(r'(\d+)% increased stun and block recovery.*'),
    'stun_duration':        re.compile(r'(\d+)% increased stun duration.*'),
    'stun_threshold':       re.compile(r'(\d+)% reduced enemy stun.*'),
    'to1attr_int':          re.compile(r'(\d+) to intelligence.*'),
    'to1attr_dex':          re.compile(r'(\d+) to dexterity.*'),
    'to1attr_str':          re.compile(r'(\d+) to strength.*'),
    'to_all_attr':          re.compile(r'(\d+) to all attributes.*'),
    'to_all_res':           re.compile(r'(\d+)% to all elemental resistances.*'),
    'to_armour':            re.compile(r'(\d+) to armour.*'),
    'to_chaos_res':         re.compile(r'(\d+)% to chaos resistance.*'),
    'to_cold_res':          re.compile(r'(\d+)% to cold resistance.*'),
    'to_evasion':           re.compile(r'(\d+) to evasion rating.*'),
    'to_fire_res':          re.compile(r'(\d+)% to fire resistance.*'),
    'to_lightning_res':     re.compile(r'(\d+)% to lightning resistance.*'),
    'to_max_es':            re.compile(r'(\d+) to maximum energy shield.*'),
    'to_weapon_range':      re.compile(r'(\d+) to weapon range.*')
    }

# from https://pathofexile.gamepedia.com/Public_stash_tab_API and https://pathofexile.gamepedia.com/Equipment
item_types = {
    'accessory': {
        'amulet': ['Coral', 'Paula', 'Amber', 'Jade', 'Lapis', 'Gold', 'Agate', 'Citrine', 'Turquoise', 'Onyx',
                   'Marble', 'Blue Pearl',
                   'Ashscale', 'Avian Twins', 'Black Maw', 'Bonespire', 'Breakrib',
                   'Chrysalis', 'Clutching', 'Deadhand', 'Deep One', 'Fangjaw', 'Greatwolf', 'Hexclaw', 'Horned',
                   'Lone Antler', 'Longtooth', 'Mandible', 'Monkey Paw', 'Monkey Twins', 'Primal Skull', 'Rot Head',
                   'Rotfeather', 'Spinefuse', 'Splitnewt', 'Three Hands', 'Three Rat', 'Undying Flesh', 'Wereclaw',
                   'Writhing'],
        'belt': [],
        'ring': []
    },
    'armour': {
        'boots',
        'chest',
        'gloves',
        'helmet',
        'shield'
    },
    'weapon': {
        'dagger',
        'claw',
        'onesword',
        'wand',
        'oneaxe',
        'sceptre',
        'onemace',
        'twosword',
        'bow',
        'staff',
        'twoaxe',
        'twomace'
    }
}


# Get text from supported_mods regex
def get_mod_text(mod_key):
    if supported_mods[mod_key]:
        return supported_mods[mod_key].pattern.replace('(\\d+)', 'X').replace('.*', '').replace('(\\d+\\.?\\d*)', 'x')
